%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Do not modify this file since it was automatically generated from:
% 
%  PhyloSimSource.R
% 
% by the Rdoc compiler part of the R.oo package.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 \name{getInsertHook.GeneralInsertor}
\alias{getInsertHook.GeneralInsertor}
\alias{GeneralInsertor.getInsertHook}
\alias{getInsertHook,GeneralInsertor-method}

 \title{Get the insert hook function}

 \description{
	Get the insert hook function.

	The insert hook allows to make various modifications on the insert before performing the insertion.

	The insert hook function is called by the insertion event handler function. The insert hook takes the
	sequence generated by the \code{generateInsert} method throught the "seq" argument. The function
	must return a Sequnece object, which will be inserted in the target sequence.
 }

 \usage{
\method{getInsertHook}{GeneralInsertor}(this, ...)
}

 \arguments{
 	\item{this}{A GeneralInsertor object.}
 	\item{...}{Not used.}
 }

 \value{
 	A function object.
 }

 \examples{
	# create a GeneralInsertor object
	i<-GeneralInsertor(
		rate=0.5,
		propose.by=function(process){sample(c(5:10),1)}, # inserts between 5 and 10
		template.seq=NucleotideSequence(length=5,processes=list(list(JC69())))
	)
	# set a dummy insert hook
	setInsertHook(i,function(seq){return(seq)})
	# set a new insert hook via virtual field
	i$insertHook<-function(seq){
		seq$processes<-list(list(GTR())) # replace the subsitution process
		return(seq)
	}
	# get the insert hook via virtual field
	i$insertHook
	# get the insert hook
	getInsertHook(i)
 }

 \author{Botond Sipos, Gregory Jordan}

 \seealso{
 	For more information see \code{\link{GeneralInsertor}}.
 }
